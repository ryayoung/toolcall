[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "toolcall"
version = "2.0.4"
requires-python = ">=3.12"
description = "The agentic framework for building without an agentic framework."
authors = [
    {name = "Ryan Young", email = "dev@ryayoung.com"}
]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/ryayoung/toolcall"
repository = "https://github.com/ryayoung/toolcall"
documentation = "https://toolcall.readthedocs.io"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries"
]
dependencies = [
    "openai>=1.86.0",
    "pydantic>=2.11",
]
[dependency-groups]
dev = [
    "black>=25.1.0",
    "jinja2>=3.1.6",
    "pyright>=1.1.402",
    "pytest>=8.4.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.11.13",
    "taskipy>=1.14.1",
]

[tool.hatch.build.targets.sdist]
packages = ["toolcall"]

[tool.hatch.build.targets.wheel]
packages = ["toolcall"]

[tool.taskipy.tasks]
format = "ruff format"
typecheck = "pyright"
generate = "uv run generate_modules.py && uv run generate_readme.py"
tests = "pytest --cov=toolcall --cov-branch -vvs"
all = "uv run task generate && uv run task format && uv run task typecheck && uv run task tests"

[tool.pyright]
typeCheckingMode = "strict"
reportUnusedImport = "error"
reportMissingParameterType = "error"
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = "error"
venvPath = "."
venv = ".venv"

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 1
exclude_also = [
    "if TYPE_CHECKING:",
    "@overload",
    '$\s*pass$',
]
